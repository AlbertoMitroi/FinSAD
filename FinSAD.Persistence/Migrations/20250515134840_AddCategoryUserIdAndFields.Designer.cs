// <auto-generated />
using System;
using FinSAD.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinSAD.Persistence.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20250515134840_AddCategoryUserIdAndFields")]
    partial class AddCategoryUserIdAndFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinSAD.Domain.Entities.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CurrencyLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Holder")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 27119m,
                            Currency = "USD",
                            CurrencyLogo = "USD.png",
                            Cvv = "**5",
                            Expiry = new DateTime(2035, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Holder = "Test User",
                            ProviderLogo = "citigroup.png",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 12102m,
                            Currency = "GBP",
                            CurrencyLogo = "GBP.png",
                            Cvv = "**9",
                            Expiry = new DateTime(2030, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Holder = "Test User",
                            ProviderLogo = "master card.png",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 7382m,
                            Currency = "EURO",
                            CurrencyLogo = "EURO.png",
                            Cvv = "**2",
                            Expiry = new DateTime(2026, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Holder = "Test User",
                            ProviderLogo = "visa.png",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.CardAmountHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardAmountHistory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2719m,
                            CardId = 1,
                            Month = 5,
                            Year = 2025
                        },
                        new
                        {
                            Id = 2,
                            Amount = 3120m,
                            CardId = 1,
                            Month = 4,
                            Year = 2025
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1998m,
                            CardId = 1,
                            Month = 3,
                            Year = 2025
                        },
                        new
                        {
                            Id = 4,
                            Amount = 4400m,
                            CardId = 1,
                            Month = 2,
                            Year = 2025
                        },
                        new
                        {
                            Id = 5,
                            Amount = 3888m,
                            CardId = 1,
                            Month = 1,
                            Year = 2025
                        },
                        new
                        {
                            Id = 6,
                            Amount = 5221m,
                            CardId = 1,
                            Month = 12,
                            Year = 2024
                        },
                        new
                        {
                            Id = 7,
                            Amount = 3790m,
                            CardId = 1,
                            Month = 11,
                            Year = 2024
                        },
                        new
                        {
                            Id = 8,
                            Amount = 6100m,
                            CardId = 1,
                            Month = 10,
                            Year = 2024
                        },
                        new
                        {
                            Id = 9,
                            Amount = 2890m,
                            CardId = 1,
                            Month = 9,
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            Amount = 3333m,
                            CardId = 1,
                            Month = 8,
                            Year = 2024
                        },
                        new
                        {
                            Id = 11,
                            Amount = 4122m,
                            CardId = 1,
                            Month = 7,
                            Year = 2024
                        },
                        new
                        {
                            Id = 12,
                            Amount = 3911m,
                            CardId = 1,
                            Month = 6,
                            Year = 2024
                        },
                        new
                        {
                            Id = 13,
                            Amount = 1280m,
                            CardId = 2,
                            Month = 5,
                            Year = 2025
                        },
                        new
                        {
                            Id = 14,
                            Amount = 1402m,
                            CardId = 2,
                            Month = 4,
                            Year = 2025
                        },
                        new
                        {
                            Id = 15,
                            Amount = 1500m,
                            CardId = 2,
                            Month = 3,
                            Year = 2025
                        },
                        new
                        {
                            Id = 16,
                            Amount = 1421m,
                            CardId = 2,
                            Month = 2,
                            Year = 2025
                        },
                        new
                        {
                            Id = 17,
                            Amount = 1600m,
                            CardId = 2,
                            Month = 1,
                            Year = 2025
                        },
                        new
                        {
                            Id = 18,
                            Amount = 1580m,
                            CardId = 2,
                            Month = 12,
                            Year = 2024
                        },
                        new
                        {
                            Id = 19,
                            Amount = 1700m,
                            CardId = 2,
                            Month = 11,
                            Year = 2024
                        },
                        new
                        {
                            Id = 20,
                            Amount = 1900m,
                            CardId = 2,
                            Month = 10,
                            Year = 2024
                        },
                        new
                        {
                            Id = 21,
                            Amount = 2100m,
                            CardId = 2,
                            Month = 9,
                            Year = 2024
                        },
                        new
                        {
                            Id = 22,
                            Amount = 2000m,
                            CardId = 2,
                            Month = 8,
                            Year = 2024
                        },
                        new
                        {
                            Id = 23,
                            Amount = 1850m,
                            CardId = 2,
                            Month = 7,
                            Year = 2024
                        },
                        new
                        {
                            Id = 24,
                            Amount = 1755m,
                            CardId = 2,
                            Month = 6,
                            Year = 2024
                        },
                        new
                        {
                            Id = 25,
                            Amount = 730m,
                            CardId = 3,
                            Month = 5,
                            Year = 2025
                        },
                        new
                        {
                            Id = 26,
                            Amount = 820m,
                            CardId = 3,
                            Month = 4,
                            Year = 2025
                        },
                        new
                        {
                            Id = 27,
                            Amount = 790m,
                            CardId = 3,
                            Month = 3,
                            Year = 2025
                        },
                        new
                        {
                            Id = 28,
                            Amount = 880m,
                            CardId = 3,
                            Month = 2,
                            Year = 2025
                        },
                        new
                        {
                            Id = 29,
                            Amount = 860m,
                            CardId = 3,
                            Month = 1,
                            Year = 2025
                        },
                        new
                        {
                            Id = 30,
                            Amount = 840m,
                            CardId = 3,
                            Month = 12,
                            Year = 2024
                        },
                        new
                        {
                            Id = 31,
                            Amount = 920m,
                            CardId = 3,
                            Month = 11,
                            Year = 2024
                        },
                        new
                        {
                            Id = 32,
                            Amount = 1010m,
                            CardId = 3,
                            Month = 10,
                            Year = 2024
                        },
                        new
                        {
                            Id = 33,
                            Amount = 980m,
                            CardId = 3,
                            Month = 9,
                            Year = 2024
                        },
                        new
                        {
                            Id = 34,
                            Amount = 940m,
                            CardId = 3,
                            Month = 8,
                            Year = 2024
                        },
                        new
                        {
                            Id = 35,
                            Amount = 895m,
                            CardId = 3,
                            Month = 7,
                            Year = 2024
                        },
                        new
                        {
                            Id = 36,
                            Amount = 875m,
                            CardId = 3,
                            Month = 6,
                            Year = 2024
                        });
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.FinanceReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FinanceReports");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.FinancialGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FinancialGoals");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.RecurringTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RecurringTransactions");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionKind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a797eb53-d9c9-408c-86ab-ae27567ee7c4",
                            Email = "test@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@GMAIL.COM",
                            NormalizedUserName = "TestUserName",
                            PasswordHash = "AQAAAAIAAYagAAAAEO6ioCstq/Dke/vHnEto2Vjr6ehMmio2AbRr24RNz4USWh8k7DTTkJp2E+BiWcOr2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A1B2C3D4-E5F6-7890-1234-56789ABCDEF0",
                            TwoFactorEnabled = false,
                            UserName = "testUserName"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Budget", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.User", "User")
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FinSAD.Domain.ValueObjects.Money", "Limit", b1 =>
                        {
                            b1.Property<int>("BudgetId")
                                .HasColumnType("int");

                            b1.HasKey("BudgetId");

                            b1.ToTable("Budgets");

                            b1.WithOwner()
                                .HasForeignKey("BudgetId");
                        });

                    b.Navigation("Limit")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Card", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.User", null)
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.CardAmountHistory", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.Card", "Card")
                        .WithMany("AmountHistory")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Category", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.User", null)
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.FinanceReport", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.FinancialGoal", b =>
                {
                    b.OwnsOne("FinSAD.Domain.ValueObjects.Money", "CurrentAmount", b1 =>
                        {
                            b1.Property<int>("FinancialGoalId")
                                .HasColumnType("int");

                            b1.HasKey("FinancialGoalId");

                            b1.ToTable("FinancialGoals");

                            b1.WithOwner()
                                .HasForeignKey("FinancialGoalId");
                        });

                    b.OwnsOne("FinSAD.Domain.ValueObjects.Money", "TargetAmount", b1 =>
                        {
                            b1.Property<int>("FinancialGoalId")
                                .HasColumnType("int");

                            b1.HasKey("FinancialGoalId");

                            b1.ToTable("FinancialGoals");

                            b1.WithOwner()
                                .HasForeignKey("FinancialGoalId");
                        });

                    b.Navigation("CurrentAmount");

                    b.Navigation("TargetAmount");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Notification", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.User", "User")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("FinSAD.Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FinSAD.Domain.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.OwnsOne("FinSAD.Domain.ValueObjects.Location", "Location", b1 =>
                        {
                            b1.Property<int>("TransactionId")
                                .HasColumnType("int");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinSAD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FinSAD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.Card", b =>
                {
                    b.Navigation("AmountHistory");
                });

            modelBuilder.Entity("FinSAD.Domain.Entities.User", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Cards");

                    b.Navigation("Categories");

                    b.Navigation("Notifications");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
